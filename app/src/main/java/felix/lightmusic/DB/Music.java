package felix.lightmusic.DB;

import android.os.Parcel;
import android.os.Parcelable;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table MUSIC.
 */
public class Music implements Parcelable {

    private Long id;
    private String title;
    private String name;
    private String artist;
    private String album;
    private Long duration;
    private Long size;
    private String url;
    private boolean isFavorite;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient MusicDao myDao;

    private List<MusicListItem> musicsItems;

    public Music() {
    }

    public Music(Long id) {
        this.id = id;
    }

    public Music(Long id, String title, String name, String artist, String album, Long duration, Long size, String url, boolean isFavorite) {
        this.id = id;
        this.title = title;
        this.name = name;
        this.artist = artist;
        this.album = album;
        this.duration = duration;
        this.size = size;
        this.url = url;
        this.isFavorite = isFavorite;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMusicDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getArtist() {
        return artist;
    }

    public void setArtist(String artist) {
        this.artist = artist;
    }

    public String getAlbum() {
        return album;
    }

    public void setAlbum(String album) {
        this.album = album;
    }

    public Long getDuration() {
        return duration;
    }

    public void setDuration(Long duration) {
        this.duration = duration;
    }

    public Long getSize() {
        return size;
    }

    public void setSize(Long size) {
        this.size = size;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public boolean getIsFavorite() {
        return isFavorite;
    }

    public void setIsFavorite(boolean isFavorite) {
        this.isFavorite = isFavorite;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<MusicListItem> getMusicsItems() {
        if (musicsItems == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MusicListItemDao targetDao = daoSession.getMusicListItemDao();
            List<MusicListItem> musicsItemsNew = targetDao._queryMusic_MusicsItems(id);
            synchronized (this) {
                if (musicsItems == null) {
                    musicsItems = musicsItemsNew;
                }
            }
        }
        return musicsItems;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetMusicsItems() {
        musicsItems = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeValue(this.id);
        dest.writeString(this.title);
        dest.writeString(this.name);
        dest.writeString(this.artist);
        dest.writeString(this.album);
        dest.writeValue(this.duration);
        dest.writeValue(this.size);
        dest.writeString(this.url);
        dest.writeByte(this.isFavorite ? (byte) 1 : (byte) 0);
        dest.writeList(this.musicsItems);
    }

    protected Music(Parcel in) {
        this.id = (Long) in.readValue(Long.class.getClassLoader());
        this.title = in.readString();
        this.name = in.readString();
        this.artist = in.readString();
        this.album = in.readString();
        this.duration = (Long) in.readValue(Long.class.getClassLoader());
        this.size = (Long) in.readValue(Long.class.getClassLoader());
        this.url = in.readString();
        this.isFavorite = in.readByte() != 0;
        this.musicsItems = new ArrayList<MusicListItem>();
        in.readList(this.musicsItems, MusicListItem.class.getClassLoader());
    }

    public static final Parcelable.Creator<Music> CREATOR = new Parcelable.Creator<Music>() {
        @Override
        public Music createFromParcel(Parcel source) {
            return new Music(source);
        }

        @Override
        public Music[] newArray(int size) {
            return new Music[size];
        }
    };
}
