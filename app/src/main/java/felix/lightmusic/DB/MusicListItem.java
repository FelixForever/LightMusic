package felix.lightmusic.DB;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MUSIC_LIST_ITEM.
 */
public class MusicListItem {

    private Long id;
    private Long musicId;
    private Long musicListId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MusicListItemDao myDao;

    private Music music;
    private Long music__resolvedKey;

    private MusicList musicList;
    private Long musicList__resolvedKey;


    public MusicListItem() {
    }

    public MusicListItem(Long id) {
        this.id = id;
    }

    public MusicListItem(Long id, Long musicId, Long musicListId) {
        this.id = id;
        this.musicId = musicId;
        this.musicListId = musicListId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMusicListItemDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getMusicId() {
        return musicId;
    }

    public void setMusicId(Long musicId) {
        this.musicId = musicId;
    }

    public Long getMusicListId() {
        return musicListId;
    }

    public void setMusicListId(Long musicListId) {
        this.musicListId = musicListId;
    }

    /** To-one relationship, resolved on first access. */
    public Music getMusic() {
        Long __key = this.musicId;
        if (music__resolvedKey == null || !music__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MusicDao targetDao = daoSession.getMusicDao();
            Music musicNew = targetDao.load(__key);
            synchronized (this) {
                music = musicNew;
            	music__resolvedKey = __key;
            }
        }
        return music;
    }

    public void setMusic(Music music) {
        synchronized (this) {
            this.music = music;
            musicId = music == null ? null : music.getId();
            music__resolvedKey = musicId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public MusicList getMusicList() {
        Long __key = this.musicListId;
        if (musicList__resolvedKey == null || !musicList__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MusicListDao targetDao = daoSession.getMusicListDao();
            MusicList musicListNew = targetDao.load(__key);
            synchronized (this) {
                musicList = musicListNew;
            	musicList__resolvedKey = __key;
            }
        }
        return musicList;
    }

    public void setMusicList(MusicList musicList) {
        synchronized (this) {
            this.musicList = musicList;
            musicListId = musicList == null ? null : musicList.getId();
            musicList__resolvedKey = musicListId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
