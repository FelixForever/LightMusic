package felix.lightmusic.DB;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MUSIC.
*/
public class MusicDao extends AbstractDao<Music, Long> {

    public static final String TABLENAME = "MUSIC";

    /**
     * Properties of entity Music.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Artist = new Property(3, String.class, "artist", false, "ARTIST");
        public final static Property Album = new Property(4, String.class, "album", false, "ALBUM");
        public final static Property Duration = new Property(5, Long.class, "duration", false, "DURATION");
        public final static Property Size = new Property(6, Long.class, "size", false, "SIZE");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
        public final static Property IsFavorite = new Property(8, boolean.class, "isFavorite", false, "IS_FAVORITE");
    };

    private DaoSession daoSession;


    public MusicDao(DaoConfig config) {
        super(config);
    }
    
    public MusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MUSIC' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'NAME' TEXT," + // 2: name
                "'ARTIST' TEXT," + // 3: artist
                "'ALBUM' TEXT," + // 4: album
                "'DURATION' INTEGER," + // 5: duration
                "'SIZE' INTEGER," + // 6: size
                "'URL' TEXT," + // 7: url
                "'IS_FAVORITE' INTEGER NOT NULL );"); // 8: isFavorite
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MUSIC_TITLE ON MUSIC" +
                " (TITLE);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MUSIC_NAME ON MUSIC" +
                " (NAME);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MUSIC_ARTIST ON MUSIC" +
                " (ARTIST);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MUSIC'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Music entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(4, artist);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(5, album);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(6, duration);
        }
 
        Long size = entity.getSize();
        if (size != null) {
            stmt.bindLong(7, size);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
        stmt.bindLong(9, entity.getIsFavorite() ? 1l: 0l);
    }

    @Override
    protected void attachEntity(Music entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Music readEntity(Cursor cursor, int offset) {
        Music entity = new Music( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // artist
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // album
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // duration
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // size
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // url
            cursor.getShort(offset + 8) != 0 // isFavorite
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Music entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArtist(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAlbum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDuration(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setSize(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsFavorite(cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Music entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Music entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
