package felix.lightmusic.DB;

import android.os.Parcel;
import android.os.Parcelable;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MUSIC_LIST.
 */
public class MusicList implements Parcelable {

    private Long id;
    /** Not-null value. */
    private String name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MusicListDao myDao;

    private List<MusicListItem> musicsItems;

    public MusicList() {
    }

    public MusicList(Long id) {
        this.id = id;
    }

    public MusicList(Long id, String name) {
        this.id = id;
        this.name = name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMusicListDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MusicListItem> getMusicsItems() {
        if (musicsItems == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MusicListItemDao targetDao = daoSession.getMusicListItemDao();
            List<MusicListItem> musicsItemsNew = targetDao._queryMusicList_MusicsItems(id);
            synchronized (this) {
                if(musicsItems == null) {
                    musicsItems = musicsItemsNew;
                }
            }
        }
        return musicsItems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMusicsItems() {
        musicsItems = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeValue(this.id);
        dest.writeString(this.name);
        dest.writeList(this.musicsItems);
    }

    protected MusicList(Parcel in) {
        this.id = (Long) in.readValue(Long.class.getClassLoader());
        this.name = in.readString();
        this.musicsItems = new ArrayList<MusicListItem>();
        in.readList(this.musicsItems, MusicListItem.class.getClassLoader());
    }

    public static final Parcelable.Creator<MusicList> CREATOR = new Parcelable.Creator<MusicList>() {
        @Override
        public MusicList createFromParcel(Parcel source) {
            return new MusicList(source);
        }

        @Override
        public MusicList[] newArray(int size) {
            return new MusicList[size];
        }
    };
}
